# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,115,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,4,18,98,8,18,
        11,18,12,18,99,1,19,4,19,103,8,19,11,19,12,19,104,1,19,1,19,1,20,
        1,20,5,20,111,8,20,10,20,12,20,114,9,20,0,0,21,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,1,0,4,1,0,48,57,3,0,9,10,12,13,32,
        32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,117,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,1,43,1,0,0,0,3,47,1,0,0,0,5,50,1,0,0,0,7,54,1,0,0,0,9,57,1,0,0,
        0,11,62,1,0,0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,70,1,0,0,0,19,77,
        1,0,0,0,21,80,1,0,0,0,23,82,1,0,0,0,25,84,1,0,0,0,27,86,1,0,0,0,
        29,88,1,0,0,0,31,90,1,0,0,0,33,92,1,0,0,0,35,94,1,0,0,0,37,97,1,
        0,0,0,39,102,1,0,0,0,41,108,1,0,0,0,43,44,5,97,0,0,44,45,5,110,0,
        0,45,46,5,100,0,0,46,2,1,0,0,0,47,48,5,111,0,0,48,49,5,114,0,0,49,
        4,1,0,0,0,50,51,5,110,0,0,51,52,5,111,0,0,52,53,5,116,0,0,53,6,1,
        0,0,0,54,55,5,105,0,0,55,56,5,102,0,0,56,8,1,0,0,0,57,58,5,101,0,
        0,58,59,5,108,0,0,59,60,5,115,0,0,60,61,5,101,0,0,61,10,1,0,0,0,
        62,63,5,100,0,0,63,64,5,101,0,0,64,65,5,102,0,0,65,12,1,0,0,0,66,
        67,5,61,0,0,67,14,1,0,0,0,68,69,5,42,0,0,69,16,1,0,0,0,70,71,5,114,
        0,0,71,72,5,101,0,0,72,73,5,116,0,0,73,74,5,117,0,0,74,75,5,114,
        0,0,75,76,5,110,0,0,76,18,1,0,0,0,77,78,5,61,0,0,78,79,5,61,0,0,
        79,20,1,0,0,0,80,81,5,43,0,0,81,22,1,0,0,0,82,83,5,45,0,0,83,24,
        1,0,0,0,84,85,5,44,0,0,85,26,1,0,0,0,86,87,5,59,0,0,87,28,1,0,0,
        0,88,89,5,40,0,0,89,30,1,0,0,0,90,91,5,41,0,0,91,32,1,0,0,0,92,93,
        5,123,0,0,93,34,1,0,0,0,94,95,5,125,0,0,95,36,1,0,0,0,96,98,7,0,
        0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,
        38,1,0,0,0,101,103,7,1,0,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,
        1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,107,6,19,0,0,107,40,
        1,0,0,0,108,112,7,2,0,0,109,111,7,3,0,0,110,109,1,0,0,0,111,114,
        1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,42,1,0,0,0,114,112,1,
        0,0,0,4,0,99,104,112,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AND = 1
    OR = 2
    NOT = 3
    IF = 4
    ELSE = 5
    DEF = 6
    ASING = 7
    MULT = 8
    RETURN = 9
    EQ = 10
    SUM = 11
    LESS = 12
    COMMA = 13
    SEMI = 14
    LPAREN = 15
    RPAREN = 16
    LCURLY = 17
    RCURLY = 18
    INT = 19
    WS = 20
    ID = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'if'", "'else'", "'def'", "'='", 
            "'*'", "'return'", "'=='", "'+'", "'-'", "','", "';'", "'('", 
            "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "IF", "ELSE", "DEF", "ASING", "MULT", "RETURN", 
            "EQ", "SUM", "LESS", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", 
            "RCURLY", "INT", "WS", "ID" ]

    ruleNames = [ "AND", "OR", "NOT", "IF", "ELSE", "DEF", "ASING", "MULT", 
                  "RETURN", "EQ", "SUM", "LESS", "COMMA", "SEMI", "LPAREN", 
                  "RPAREN", "LCURLY", "RCURLY", "INT", "WS", "ID" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


